{"ast":null,"code":"const express = require(\"express\");\nconst fetch = require(\"node-fetch\");\nrequire(\"dotenv\").config(); // .env 파일에서 환경 변수 로드\n\nconst app = express();\nconst port = process.env.PORT || 3000;\nconst apiKey = process.env.OPENAI_API_KEY;\nconst apiEndpoint = \"https://api.openai.com/v1/chat/completions\";\napp.use(express.json());\napp.post(\"/api/chat\", async (req, res) => {\n  const {\n    prompt\n  } = req.body;\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`\n    },\n    body: JSON.stringify({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"user\",\n        content: prompt\n      }],\n      temperature: 0.7,\n      max_tokens: 150,\n      top_p: 0.9,\n      frequency_penalty: 0.5,\n      presence_penalty: 0.3,\n      stop: [\"Human\"]\n    })\n  };\n  try {\n    const response = await fetch(apiEndpoint, requestOptions);\n    const data = await response.json();\n    const aiResponse = data.choices[0].message.content;\n    res.json({\n      aiResponse\n    });\n  } catch (error) {\n    console.error(\"OpenAI API 호출 중 오류 발생:\", error);\n    res.status(500).json({\n      error: \"OpenAI API 호출 중 오류 발생\"\n    });\n  }\n});\napp.listen(port, () => {\n  console.log(`서버가 http://localhost:${port} 포트에서 실행 중입니다.`);\n});","map":{"version":3,"names":["express","require","fetch","config","app","port","process","env","PORT","apiKey","OPENAI_API_KEY","apiEndpoint","use","json","post","req","res","prompt","body","requestOptions","method","headers","Authorization","JSON","stringify","model","messages","role","content","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","stop","response","data","aiResponse","choices","message","error","console","status","listen","log"],"sources":["/Users/ethankim/Aiproject/src/chatbot.js"],"sourcesContent":["const express = require(\"express\");\nconst fetch = require(\"node-fetch\");\nrequire(\"dotenv\").config(); // .env 파일에서 환경 변수 로드\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\nconst apiKey = process.env.OPENAI_API_KEY;\nconst apiEndpoint = \"https://api.openai.com/v1/chat/completions\";\n\napp.use(express.json());\n\napp.post(\"/api/chat\", async (req, res) => {\n  const { prompt } = req.body;\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`,\n    },\n    body: JSON.stringify({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      temperature: 0.7,\n      max_tokens: 150,\n      top_p: 0.9,\n      frequency_penalty: 0.5,\n      presence_penalty: 0.3,\n      stop: [\"Human\"],\n    }),\n  };\n\n  try {\n    const response = await fetch(apiEndpoint, requestOptions);\n    const data = await response.json();\n    const aiResponse = data.choices[0].message.content;\n    res.json({ aiResponse });\n  } catch (error) {\n    console.error(\"OpenAI API 호출 중 오류 발생:\", error);\n    res.status(500).json({ error: \"OpenAI API 호출 중 오류 발생\" });\n  }\n});\n\napp.listen(port, () => {\n  console.log(`서버가 http://localhost:${port} 포트에서 실행 중입니다.`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;AACnCA,OAAO,CAAC,QAAQ,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC;;AAE5B,MAAMC,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,IAAI;AAErC,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAG,CAACG,cAAc;AACzC,MAAMC,WAAW,GAAG,4CAA4C;AAEhEP,GAAG,CAACQ,GAAG,CAACZ,OAAO,CAACa,IAAI,CAAC,CAAC,CAAC;AAEvBT,GAAG,CAACU,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC;EAAO,CAAC,GAAGF,GAAG,CAACG,IAAI;EAE3B,MAAMC,cAAc,GAAG;IACrBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUb,MAAM;IACjC,CAAC;IACDS,IAAI,EAAEK,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAE,eAAe;MACtBC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAEX;MACX,CAAC,CACF;MACDY,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE,GAAG;MACfC,KAAK,EAAE,GAAG;MACVC,iBAAiB,EAAE,GAAG;MACtBC,gBAAgB,EAAE,GAAG;MACrBC,IAAI,EAAE,CAAC,OAAO;IAChB,CAAC;EACH,CAAC;EAED,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMjC,KAAK,CAACS,WAAW,EAAEQ,cAAc,CAAC;IACzD,MAAMiB,IAAI,GAAG,MAAMD,QAAQ,CAACtB,IAAI,CAAC,CAAC;IAClC,MAAMwB,UAAU,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,OAAO;IAClDZ,GAAG,CAACH,IAAI,CAAC;MAAEwB;IAAW,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CxB,GAAG,CAAC0B,MAAM,CAAC,GAAG,CAAC,CAAC7B,IAAI,CAAC;MAAE2B,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC1D;AACF,CAAC,CAAC;AAEFpC,GAAG,CAACuC,MAAM,CAACtC,IAAI,EAAE,MAAM;EACrBoC,OAAO,CAACG,GAAG,CAAC,wBAAwBvC,IAAI,gBAAgB,CAAC;AAC3D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}