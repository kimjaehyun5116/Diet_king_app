{"ast":null,"code":"const chatMessages = document.querySelector(\"#chat-messages\");\nconst userInput = document.querySelector(\"#user-input input\");\nconst sendButton = document.querySelector(\"#user-input button\");\nconst apiEndpoint = \"/.netlify/functions/chatbot\"; // Netlify Functions 엔드포인트\n\nsendButton.addEventListener(\"click\", async () => {\n  const message = userInput.value.trim();\n  if (message.length === 0) return;\n  addMessage(\"나\", message); // 사용자 입력 메시지 화면에 추가\n\n  try {\n    const response = await fetch(apiEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        prompt: message\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"서버에서 오류가 발생했습니다.\");\n    }\n    const data = await response.json();\n    const aiResponse = data.aiResponse;\n    addMessage(\"챗봇\", aiResponse); // 챗봇 응답 메시지 화면에 추가\n  } catch (error) {\n    console.error(\"서버 요청 중 오류 발생:\", error);\n    addMessage(\"챗봇\", \"서버와의 통신 중 오류가 발생했습니다.\");\n  }\n  userInput.value = \"\"; // 입력 필드 초기화\n});\nuserInput.addEventListener(\"keydown\", async event => {\n  if (event.key === \"Enter\") {\n    event.preventDefault(); // 기본 엔터 행동 막기\n    const message = userInput.value.trim();\n    if (message.length === 0) return;\n    addMessage(\"나\", message); // 사용자 입력 메시지 화면에 추가\n\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: message\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"서버에서 오류가 발생했습니다.\");\n      }\n      const data = await response.json();\n      const aiResponse = data.aiResponse;\n      addMessage(\"챗봇\", aiResponse); // 챗봇 응답 메시지 화면에 추가\n    } catch (error) {\n      console.error(\"서버 요청 중 오류 발생:\", error);\n      addMessage(\"챗봇\", \"서버와의 통신 중 오류가 발생했습니다.\");\n    }\n    userInput.value = \"\"; // 입력 필드 초기화\n  }\n});\nfunction addMessage(sender, message) {\n  const messageElement = document.createElement(\"div\");\n  messageElement.className = \"message\";\n  messageElement.textContent = `${sender}: ${message}`;\n  chatMessages.prepend(messageElement);\n}","map":{"version":3,"names":["chatMessages","document","querySelector","userInput","sendButton","apiEndpoint","addEventListener","message","value","trim","length","addMessage","response","fetch","method","headers","body","JSON","stringify","prompt","ok","Error","data","json","aiResponse","error","console","event","key","preventDefault","sender","messageElement","createElement","className","textContent","prepend"],"sources":["/Users/ethankim/Aiproject/src/chatbot.js"],"sourcesContent":["const chatMessages = document.querySelector(\"#chat-messages\");\nconst userInput = document.querySelector(\"#user-input input\");\nconst sendButton = document.querySelector(\"#user-input button\");\n\nconst apiEndpoint = \"/.netlify/functions/chatbot\"; // Netlify Functions 엔드포인트\n\nsendButton.addEventListener(\"click\", async () => {\n  const message = userInput.value.trim();\n  if (message.length === 0) return;\n\n  addMessage(\"나\", message); // 사용자 입력 메시지 화면에 추가\n\n  try {\n    const response = await fetch(apiEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ prompt: message }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"서버에서 오류가 발생했습니다.\");\n    }\n\n    const data = await response.json();\n    const aiResponse = data.aiResponse;\n    addMessage(\"챗봇\", aiResponse); // 챗봇 응답 메시지 화면에 추가\n  } catch (error) {\n    console.error(\"서버 요청 중 오류 발생:\", error);\n    addMessage(\"챗봇\", \"서버와의 통신 중 오류가 발생했습니다.\");\n  }\n\n  userInput.value = \"\"; // 입력 필드 초기화\n});\n\nuserInput.addEventListener(\"keydown\", async (event) => {\n  if (event.key === \"Enter\") {\n    event.preventDefault(); // 기본 엔터 행동 막기\n    const message = userInput.value.trim();\n    if (message.length === 0) return;\n\n    addMessage(\"나\", message); // 사용자 입력 메시지 화면에 추가\n\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ prompt: message }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"서버에서 오류가 발생했습니다.\");\n      }\n\n      const data = await response.json();\n      const aiResponse = data.aiResponse;\n      addMessage(\"챗봇\", aiResponse); // 챗봇 응답 메시지 화면에 추가\n    } catch (error) {\n      console.error(\"서버 요청 중 오류 발생:\", error);\n      addMessage(\"챗봇\", \"서버와의 통신 중 오류가 발생했습니다.\");\n    }\n\n    userInput.value = \"\"; // 입력 필드 초기화\n  }\n});\n\nfunction addMessage(sender, message) {\n  const messageElement = document.createElement(\"div\");\n  messageElement.className = \"message\";\n  messageElement.textContent = `${sender}: ${message}`;\n  chatMessages.prepend(messageElement);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}