{"ast":null,"code":"// 채팅 메시지를 표시할 DOM\nconst chatMessages = document.querySelector(\"#chat-messages\");\n// 사용자 입력 필드\nconst userInput = document.querySelector(\"#user-input input\");\n// 전송 버튼\nconst sendButton = document.querySelector(\"#user-input button\");\n// 발급받은 OpenAI API 키를 직접 설정\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n// OpenAI API 엔드포인트 주소를 변수로 설정\nconst apiEndpoint = \"https://api.openai.com/v1/chat/completions\";\nfunction addMessage(sender, message) {\n  // 새로운 div 생성\n  const messageElement = document.createElement(\"div\");\n  // 생성된 요소에 클래스 추가\n  messageElement.className = \"message\";\n  // 채팅 메시지 목록에 새로운 메시지 추가\n  messageElement.textContent = `${sender}: ${message}`;\n  chatMessages.prepend(messageElement);\n}\n\n// ChatGPT API 요청\nasync function fetchAIResponse(prompt) {\n  // API 요청에 사용할 옵션을 정의\n  const requestOptions = {\n    method: \"POST\",\n    // API 요청의 헤더를 설정\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`\n    },\n    body: JSON.stringify({\n      model: \"gpt-3.5-turbo\",\n      // 사용할 AI 모델\n      messages: [{\n        role: \"user\",\n        // 메시지 역할을 user로 설정\n        content: prompt // 사용자가 입력한 메시지\n      }],\n      temperature: 0.7,\n      // 모델의 출력 다양성\n      max_tokens: 150,\n      // 응답받을 메시지 최대 토큰(단어) 수 설정\n      top_p: 0.9,\n      // 토큰 샘플링 확률을 설정\n      frequency_penalty: 0.5,\n      // 일반적으로 나오지 않는 단어를 억제하는 정도\n      presence_penalty: 0.3,\n      // 동일한 단어나 구문이 반복되는 것을 억제하는 정도\n      stop: [\"Human\"] // 생성된 텍스트에서 종료 구문을 설정\n    })\n  };\n\n  // API 요청후 응답 처리\n  try {\n    const response = await fetch(apiEndpoint, requestOptions);\n    const data = await response.json();\n    const aiResponse = data.choices[0].message.content;\n    return aiResponse;\n  } catch (error) {\n    console.error(\"OpenAI API 호출 중 오류 발생:\", error);\n    return \"OpenAI API 호출 중 오류 발생\";\n  }\n}\n\n// 전송 버튼 클릭 이벤트 처리\nsendButton.addEventListener(\"click\", async () => {\n  // 사용자가 입력한 메시지\n  const message = userInput.value.trim();\n  // 메시지가 비어있으면 리턴\n  if (message.length === 0) return;\n  // 사용자 메시지 화면에 추가\n  addMessage(\"나\", message);\n  userInput.value = \"\";\n  // ChatGPT API 요청후 답변을 화면에 추가\n  const aiResponse = await fetchAIResponse(message);\n  addMessage(\"챗봇\", aiResponse);\n});\n\n// 사용자 입력 필드에서 Enter 키 이벤트를 처리\nuserInput.addEventListener(\"keydown\", async event => {\n  if (event.key === \"Enter\") {\n    event.preventDefault(); // 기본 엔터 행동을 막습니다.\n    // 사용자가 입력한 메시지\n    const message = userInput.value.trim();\n    // 메시지가 비어있으면 리턴\n    if (message.length === 0) return;\n    // 사용자 메시지 화면에 추가\n    addMessage(\"나\", message);\n    userInput.value = \"\";\n    // ChatGPT API 요청후 답변을 화면에 추가\n    const aiResponse = await fetchAIResponse(message);\n    addMessage(\"챗봇\", aiResponse);\n  }\n});","map":{"version":3,"names":["chatMessages","document","querySelector","userInput","sendButton","apiKey","process","env","REACT_APP_OPENAI_API_KEY","apiEndpoint","addMessage","sender","message","messageElement","createElement","className","textContent","prepend","fetchAIResponse","prompt","requestOptions","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","stop","response","fetch","data","json","aiResponse","choices","error","console","addEventListener","value","trim","length","event","key","preventDefault"],"sources":["/Users/ethankim/Aiproject/src/chatbot.js"],"sourcesContent":["// 채팅 메시지를 표시할 DOM\nconst chatMessages = document.querySelector(\"#chat-messages\");\n// 사용자 입력 필드\nconst userInput = document.querySelector(\"#user-input input\");\n// 전송 버튼\nconst sendButton = document.querySelector(\"#user-input button\");\n// 발급받은 OpenAI API 키를 직접 설정\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n// OpenAI API 엔드포인트 주소를 변수로 설정\nconst apiEndpoint = \"https://api.openai.com/v1/chat/completions\";\n\nfunction addMessage(sender, message) {\n  // 새로운 div 생성\n  const messageElement = document.createElement(\"div\");\n  // 생성된 요소에 클래스 추가\n  messageElement.className = \"message\";\n  // 채팅 메시지 목록에 새로운 메시지 추가\n  messageElement.textContent = `${sender}: ${message}`;\n  chatMessages.prepend(messageElement);\n}\n\n// ChatGPT API 요청\nasync function fetchAIResponse(prompt) {\n  // API 요청에 사용할 옵션을 정의\n  const requestOptions = {\n    method: \"POST\",\n    // API 요청의 헤더를 설정\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`,\n    },\n    body: JSON.stringify({\n      model: \"gpt-3.5-turbo\", // 사용할 AI 모델\n      messages: [\n        {\n          role: \"user\", // 메시지 역할을 user로 설정\n          content: prompt, // 사용자가 입력한 메시지\n        },\n      ],\n      temperature: 0.7, // 모델의 출력 다양성\n      max_tokens: 150, // 응답받을 메시지 최대 토큰(단어) 수 설정\n      top_p: 0.9, // 토큰 샘플링 확률을 설정\n      frequency_penalty: 0.5, // 일반적으로 나오지 않는 단어를 억제하는 정도\n      presence_penalty: 0.3, // 동일한 단어나 구문이 반복되는 것을 억제하는 정도\n      stop: [\"Human\"], // 생성된 텍스트에서 종료 구문을 설정\n    }),\n  };\n\n  // API 요청후 응답 처리\n  try {\n    const response = await fetch(apiEndpoint, requestOptions);\n    const data = await response.json();\n    const aiResponse = data.choices[0].message.content;\n    return aiResponse;\n  } catch (error) {\n    console.error(\"OpenAI API 호출 중 오류 발생:\", error);\n    return \"OpenAI API 호출 중 오류 발생\";\n  }\n}\n\n// 전송 버튼 클릭 이벤트 처리\nsendButton.addEventListener(\"click\", async () => {\n  // 사용자가 입력한 메시지\n  const message = userInput.value.trim();\n  // 메시지가 비어있으면 리턴\n  if (message.length === 0) return;\n  // 사용자 메시지 화면에 추가\n  addMessage(\"나\", message);\n  userInput.value = \"\";\n  // ChatGPT API 요청후 답변을 화면에 추가\n  const aiResponse = await fetchAIResponse(message);\n  addMessage(\"챗봇\", aiResponse);\n});\n\n// 사용자 입력 필드에서 Enter 키 이벤트를 처리\nuserInput.addEventListener(\"keydown\", async (event) => {\n  if (event.key === \"Enter\") {\n    event.preventDefault(); // 기본 엔터 행동을 막습니다.\n    // 사용자가 입력한 메시지\n    const message = userInput.value.trim();\n    // 메시지가 비어있으면 리턴\n    if (message.length === 0) return;\n    // 사용자 메시지 화면에 추가\n    addMessage(\"나\", message);\n    userInput.value = \"\";\n    // ChatGPT API 요청후 답변을 화면에 추가\n    const aiResponse = await fetchAIResponse(message);\n    addMessage(\"챗봇\", aiResponse);\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}